# -*- coding: utf-8 -*-
"""Myntra_images_title.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11EJDwG5NhVU0x34MHYFwsQ1ml8nNHTez
"""

# from google.colab import drive
# drive.mount('/content/gdrive')

import pandas as pd
from PIL import Image
import os
import re
import string
import numpy as np
import matplotlib.pyplot as plt
import cv2
import random
import plotly.express as px

# !pip install -q hvplot
# import hvplot.pandas  # custom install

# from glob import glob

# from urllib import request

# import missingno as msno

"""**CSV Files**"""
gdrive_csv = '/content/gdrive/MyDrive/Myntra_Hackathon/data/images_metadata.csv'
local_csv = 'C:/Users/dell/Desktop/data/images_metadata.csv'
metadata = pd.read_csv(local_csv)
# metadata = pd.read_csv(gdrive_csv)
metadata.sample(5)

metadata.sample(5)

"""**Image folders**"""

#Image Folder Paths
common = 'C:/Users/dell/Desktop/Myntra_Hackathon/static/images/'
north_jpg_directory = common + 'north'
northeast_jpg_directory = common + 'north-east'
east_jpg_directory = common + 'east'
south_jpg_directory = common + 'south'
western_jpg_directory = common + 'western'

def getImagePaths(path):
    """
    Function to Combine Directory Path with individual Image Paths
    
    parameters: path(string) - Path of directory
    returns: image_names(string) - Full Image Path
    """
    image_names = []
    for dirname, _, filenames in os.walk(path):
        for filename in filenames:
            fullpath = os.path.join(dirname, filename)
            image_names.append(fullpath)
    return image_names

#Get complete image paths for all the regions
north_images_path = sorted(getImagePaths(north_jpg_directory))
northeast_images_path = sorted(getImagePaths(northeast_jpg_directory))
east_images_path = sorted(getImagePaths(east_jpg_directory))
south_images_path = sorted(getImagePaths(south_jpg_directory))
western_images_path = sorted(getImagePaths(western_jpg_directory))

def display_multiple_img(images_paths, region):
    """
    Function to Return Images from Dataset as JSON.
    
    parameters: images_path for the selected region
                region is selected region
    """
    
        
        

def clean_region(region):
  region = re.sub('\s+', '', region.lower())
  return region

def search(query_region):
  query_region = clean_region(query_region)
  if query_region == 'north':
    image_path = north_images_path
  elif query_region == 'northeast':
    image_path = northeast_images_path
  elif query_region == 'east':
    image_path = east_images_path
  elif query_region == 'south':
    image_path = south_images_path
  elif query_region == 'western':
    image_path = western_images_path
  return display_multiple_img(image_path,query_region)

search('north')

search('south')