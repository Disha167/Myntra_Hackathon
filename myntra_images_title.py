# -*- coding: utf-8 -*-
"""Myntra_images_title.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11EJDwG5NhVU0x34MHYFwsQ1ml8nNHTez
"""

# from google.colab import drive
# drive.mount('/content/gdrive')

import pandas as pd
from PIL import Image
import os
import re
import string
import numpy as np
import matplotlib.pyplot as plt
import cv2
import random
import plotly.express as px

# !pip install -q hvplot
# import hvplot.pandas  # custom install

# from glob import glob

# from urllib import request

# import missingno as msno

"""**CSV Files**"""

metadata = pd.read_csv('/content/gdrive/MyDrive/Myntra_Hackathon/data/images_metadata.csv')
metadata.sample(5)

metadata.sample(5)

"""**Image folders**"""

#Image Folder Paths
north_jpg_directory = '/content/gdrive/MyDrive/Myntra_Hackathon/data/images/north'
northeast_jpg_directory = '/content/gdrive/MyDrive/Myntra_Hackathon/data/images/north-east'
east_jpg_directory = '/content/gdrive/MyDrive/Myntra_Hackathon/data/images/east'
south_jpg_directory = '/content/gdrive/MyDrive/Myntra_Hackathon/data/images/south'
western_jpg_directory = '/content/gdrive/MyDrive/Myntra_Hackathon/data/images/western'

def getImagePaths(path):
    """
    Function to Combine Directory Path with individual Image Paths
    
    parameters: path(string) - Path of directory
    returns: image_names(string) - Full Image Path
    """
    image_names = []
    for dirname, _, filenames in os.walk(path):
        for filename in filenames:
            fullpath = os.path.join(dirname, filename)
            image_names.append(fullpath)
    return image_names

#Get complete image paths for all the regions
north_images_path = sorted(getImagePaths(north_jpg_directory))
northeast_images_path = sorted(getImagePaths(northeast_jpg_directory))
east_images_path = sorted(getImagePaths(east_jpg_directory))
south_images_path = sorted(getImagePaths(south_jpg_directory))
western_images_path = sorted(getImagePaths(western_jpg_directory))

def display_multiple_img(images_paths, rows, cols):
    """
    Function to Display Images from Dataset.
    
    parameters: images_path(string) - Paths of Images to be displayed
                rows(int) - No. of Rows in Output
                cols(int) - No. of Columns in Output
    """
    figure, ax = plt.subplots(nrows=rows,ncols=cols,figsize=(40,20) )
    for ind,image_path in enumerate(images_paths):
        
        image=cv2.imread(image_path)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image_name = image_path.split('/')[-1]
        title = metadata[metadata['images'] == image_name]['title'].tolist()[0]
        try:
            ax.ravel()[ind].set_title(title)
            ax.ravel()[ind].imshow(image)
            ax.ravel()[ind].set_axis_off()
        except:
            continue;
    plt.tight_layout()
    plt.show()

def clean_region(region):
  region = re.sub('\s+', '', region.lower())
  return region

def search(query_region):
  query_region = clean_region(query_region)
  if query_region == 'north':
    image_path = north_images_path
  elif query_region == 'northeast':
    image_path = northeast_images_path
  elif query_region == 'east':
    image_path = east_images_path
  elif query_region == 'south':
    image_path = south_images_path
  elif query_region == 'western':
    image_path = western_images_path
  return display_multiple_img(image_path[:15], 5, 3)

search('north')

search('south')